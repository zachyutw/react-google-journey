{"version":3,"sources":["routes/Routes.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","navMainFields","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","JourneyPage","React","lazy","Promise","all","e","then","bind","journeyRoute","name","main","path","url","create","Routes","a","createElement","fallback","Object","assign","component","Boolean","window","location","hostname","match","t","text","ReactDOM","render","react_default","react_router_dom","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAAAG,EAAAP,EAAA,GAEMQ,EAAcC,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAZ,EAAAa,EAAA,GAAAb,EAAAa,EAAA,KAAAC,KAAAd,EAAAe,KAAA,YAExBC,EAAe,CACxBC,KAAM,UACNC,KAAM,CAAEC,KAAM,YAAaF,KAAM,OAAQG,IAAK,KAC9CC,OAAQ,CAAEF,KAAM,UAAWF,KAAM,SAAUG,IAAK,YAEvCjB,EAAgB,CAAEa,GAUhBM,IATA,WACX,OACIjB,EAAAkB,EAAAC,cAACjB,EAAA,EAAD,KACIF,EAAAkB,EAAAC,cAACpB,EAAA,SAAD,CAAUqB,SAAUpB,EAAAkB,EAAAC,cAAA,0BAChBnB,EAAAkB,EAAAC,cAACjB,EAAA,EAADmB,OAAAC,OAAA,GAAWX,EAAaE,KAAxB,CAA8BU,UAAWpB,qLCFrCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8ECTNH,OAAOI,EAAI,SAACC,GAAD,OAAUA,GACrBC,IAASC,OACLC,EAAAf,EAAAC,cAACe,EAAA,EAAD,KACID,EAAAf,EAAAC,cAACF,EAAA,EAAD,OAEJkB,SAASC,eAAe,SDmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.6aa24ef7.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nconst JourneyPage = React.lazy(() => import('../components/Pages/JourneyPage/JourneyPage'));\n\nexport const journeyRoute = {\n    name: 'journey',\n    main: { path: '/:target?', name: 'main', url: '/' },\n    create: { path: '/create', name: 'create', url: '/create' }\n};\nexport const navMainFields = [ journeyRoute ];\nconst Routes = () => {\n    return (\n        <Switch>\n            <Suspense fallback={<div>Loading...</div>}>\n                <Route {...journeyRoute.main} component={JourneyPage} />\n            </Suspense>\n        </Switch>\n    );\n};\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './routes/Routes';\nwindow.t = (text) => text;\nReactDOM.render(\n    <BrowserRouter>\n        <Routes />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}